/*/{Protheus.doc} U_COTACOES_MOEDAS_BC
    Programa para importacao das cotacoes de moedas e gravacao na tabela SM2
    @type  Function
    @author Renan Augusto
    @since 05/08/2024
    
    M2_MOEDA2 := DOLAR_COMPRA
    M2_MOEDA3 := DOLAR_VENDA
    M2_MOEDA4 := EURO_COMPRA
    M2_MOEDAS5 := EURO_VENDA

    @see (links_or_references)
/*/
Function U_COTACOES_MOEDAS_BC

    Local lRpc := .F.
    Local lInclui := .F.
    Local cBaseUrl := 'https://www4.bcb.gov.br/Download/fechamento/'
    Local dData := stod('20200101')
    Local cData := ''
    Local cArqMoedas := 'system\m2_data.txt'
    Local cTxtCotacoes := ''
    Local nM2_MOEDA2 := 0
    Local nM2_MOEDA3 := 0
    Local nM2_MOEDA4 := 0
    Local nM2_MOEDA5 := 0
    Local aLinhas := array(0)
    Local aCotacoes := array(0)
    Local x

    if type('cEmpAnt') != 'C'
        lRpc := .T.
        rpcSetEnv('99', '01')
    endif

    if .not. file(cArqMoedas)
        memowrite(cArqMoedas, '20200101')  //escreve um arquivo
    endif

    dData := stod(memoread(cArqMoedas)) //obtem o conteudo de um arquivo

    if dData > date()
        if lRpc
            rpcClearEnv()
        endif
        return
    endif

    while .T.   //enquanto true vai executar para sempre o laço. Posso inserir um escape dentro do código 

        //montando a variavel de controle para realizar o download da cotação no banco central 
        dData := stod(memoread(cArqMoedas))
        cData := dtos(datavalida(dData - 1, .F.)) 
        //funcao data valida verifica se uma data é valido ou nao.
        //O segundo parametro da função indica se ele deve retroceder para ultima data valida
        aCotacoes := array(0)
        cTxtCotacoes := httpget(cBaseUrl + cData + '.csv') //httpget manda requisições para url para obter seu conteudo
        aLinhas := strToKarr(cTxtCotacoes, CHR(13) + CHR(10)) //funcao que transforma string em arrays o CHR indica qual caractere vai ser o delimitador 

        For x := 1 to len(aLinhas)
            if "USD" $ aLinhas[x] .or. "EUR" $ aLinhas[x]
                aadd(aCotacoes, strToKarr(aLinhas[x], ";"))
            endif
        next
        
        dbSelectArea("SM2")
        dbSetOrder(1)

        if len(aCotacoes) == 0
            nM2_MOEDA2  :=  0  
            nM2_MOEDA3  :=  0
            nM2_MOEDA4  :=  0
            nM2_MOEDA5  :=  0

            lAchou := dbSeek(dData - 1)

            if lAchou
                nM2_MOEDA2  := M2_MOEDA2  
                nM2_MOEDA3  := M2_MOEDA3
                nM2_MOEDA4  := M2_MOEDA4
                nM2_MOEDA5  := M2_MOEDA5
            endif
        else
            //funcao val transforma de string para numerico
            nM2_MOEDA2  := val(strtran(aCotacoes[1,5], ",", ".")) //strtran transforma um caractere em outro 
            nM2_MOEDA3  := val(strtran(aCotacoes[1,6], ",", "."))
            nM2_MOEDA4  := val(strtran(aCotacoes[2,5], ",", "."))
            nM2_MOEDA5  := val(strtran(aCotacoes[2,6], ",", "."))
        endif

        lInclui     :=  .not. dbSeek(dData)

        
        reclock(alias(), lInclui)
            M2_DATA     := dData
            M2_INFORM   := "S"    
            M2_MOEDA1   := 1
            M2_MOEDA2   := nM2_MOEDA2
            M2_MOEDA3   := nM2_MOEDA3
            M2_MOEDA4   := nM2_MOEDA4
            M2_MOEDA5   := nM2_MOEDA5
        msunlock()
        

        if dData >= date()
            exit
        endif

    endDo

    if lRpc
        rpcClearEnv()
    endif

Return return_var
